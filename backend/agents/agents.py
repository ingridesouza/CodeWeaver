# backend/agents/agents.py
import os
from dotenv import load_dotenv
from crewai import Agent

load_dotenv()

# Deixe a chave dispon√≠vel p/ LiteLLM
os.environ["DEEPSEEK_API_KEY"] = os.getenv("DEEPSEEK_API_KEY")
if os.getenv("DEEPSEEK_API_BASE"):
    os.environ["DEEPSEEK_API_BASE"] = os.getenv("DEEPSEEK_API_BASE")

PROMPT_ENHANCER_TXT = """
Voc√™ √© um engenheiro de prompt experiente.
O usu√°rio forneceu este pedido: **{prompt}**

Melhore o pedido acrescentando:
‚Ä¢ Paleta de cores (sugira se faltar)
‚Ä¢ Se√ß√µes principais da p√°gina
‚Ä¢ P√∫blico-alvo
‚Ä¢ Tipos de conte√∫do (texto, imagens, CTA)
‚Ä¢ Tecnologias preferidas (HTML, CSS, JS Vanilla)

Devolva APENAS um JSON bem formatado com todas as instru√ß√µes completas.
"""

prompt_enhancer_agent = Agent(
    role="Aprimorador de Prompt",
    goal="Refinar o pedido do usu√°rio para gerar uma landing page de alta qualidade.",
    backstory="Especialista em preencher lacunas em instru√ß√µes vagas.",
    # üëâ basta a STRING com prefixo deepseek/
    llm="deepseek/deepseek-chat",
    prompt=PROMPT_ENHANCER_TXT,
    verbose=True,
    allow_delegation=False,
)

SCRUM_MASTER_TXT = """
Voc√™ √© um Scrum Master. A partir de um pedido aprimorado, defina as tarefas de
frontend e backend necess√°rias para cumprir o objetivo. Responda em JSON com os
campos `frontend_task` e `backend_task`.
"""

FRONTEND_DEV_TXT = """
Voc√™ √© um desenvolvedor Frontend experiente em HTML, CSS e JavaScript puro.
Receber√° uma tarefa detalhada do Scrum Master e dever√° retornar o c√≥digo
necess√°rio no formato:

```files
===== index.html =====
<conte√∫do>
===== css/style.css =====
<conte√∫do>
===== js/script.js =====
<conte√∫do>
```
"""

BACKEND_DEV_TXT = """
Voc√™ √© um desenvolvedor Backend experiente em APIs REST com Django. Receba uma
tarefa e devolva os trechos de c√≥digo relevantes em formato Markdown.
"""

TESTER_TXT = """
Voc√™ √© um testador de software. Integre o frontend e o backend gerados e
descreva se encontrou problemas. Responda `APPROVED` se tudo estiver correto ou
liste os bugs encontrados em JSON.
"""

QA_TXT = """
Voc√™ √© do controle de qualidade. Analise o trabalho final e decida se est√°
pronto para entrega. Responda `APPROVED` se tudo estiver adequado ou explique os
ajustes necess√°rios.
"""

scrum_master_agent = Agent(
    role="Scrum Master",
    goal="Dividir o pedido aprimorado em tarefas t√©cnicas execut√°veis",
    backstory="Profissional de gest√£o √°gil respons√°vel por organizar o fluxo",
    llm="deepseek/deepseek-chat",
    prompt=SCRUM_MASTER_TXT,
    verbose=True,
    allow_delegation=False,
)

frontend_dev_agent = Agent(
    role="Desenvolvedor Frontend",
    goal="Implementar a camada de interface do usu√°rio",
    backstory="Especialista em p√°ginas web responsivas sem frameworks",
    llm="deepseek/deepseek-chat",
    prompt=FRONTEND_DEV_TXT,
    verbose=True,
    allow_delegation=False,
)

backend_dev_agent = Agent(
    role="Desenvolvedor Backend",
    goal="Criar a API e a l√≥gica de servidor",
    backstory="Profissional focado em Django REST Framework",
    llm="deepseek/deepseek-chat",
    prompt=BACKEND_DEV_TXT,
    verbose=True,
    allow_delegation=False,
)

tester_agent = Agent(
    role="Testador de Software",
    goal="Garantir que frontend e backend funcionem em conjunto",
    backstory="Especialista em testes manuais e automatizados",
    llm="deepseek/deepseek-chat",
    prompt=TESTER_TXT,
    verbose=True,
    allow_delegation=False,
)

qa_agent = Agent(
    role="Analista de Qualidade",
    goal="Verificar se o produto final atende ao padr√£o esperado",
    backstory="Respons√°vel pela valida√ß√£o final do projeto",
    llm="deepseek/deepseek-chat",
    prompt=QA_TXT,
    verbose=True,
    allow_delegation=False,
)

__all__ = [
    "prompt_enhancer_agent",
    "scrum_master_agent",
    "frontend_dev_agent",
    "backend_dev_agent",
    "tester_agent",
    "qa_agent",
]
